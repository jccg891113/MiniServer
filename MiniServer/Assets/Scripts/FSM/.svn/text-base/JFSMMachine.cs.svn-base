using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Fsm;

namespace Fsm.JFSM
{
	public class JFSMMachine<T> where T : struct {
		
		protected JFSMState<T> currentState;
		protected T defaultStateType;
		protected Dictionary<T, JFSMState<T>> allStates;
		
		public JFSMMachine() {
			allStates = new Dictionary<T, JFSMState<T>>();
		}
		
		public virtual void AddState (JFSMState<T> newState) {
			if (allStates.ContainsKey(newState.GetStateType())) {
				allStates[newState.GetStateType()] = newState;
			} else {
				allStates.Add(newState.GetStateType(), newState);
			}
		}
		
		public JFSMState<T> GetState(T stateType)
		{
			return allStates[stateType];
		}
		
		public T GetCurrrentStateType()
		{
			return currentState.GetStateType();
		}
		
		public JFSMState<T> GetCurrrentState()
		{
			return currentState;
		}
		
		public virtual void SetDefaultState (T newState) {
			defaultStateType = newState;
		}

		public virtual void UpdateState (float deltaTime)
		{
			if (currentState == null) {
				currentState = allStates[defaultStateType];
				currentState.Enter();
			} else {
				T nextState = currentState.GetNextState();
				if (!nextState.Equals(currentState.GetStateType())) {
					currentState.Leave();
					currentState = allStates[nextState];
					currentState.Enter();
				}
				currentState.Update(deltaTime);
			}
		}
	}
}